{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Persons","searchResults","deletePerson","map","person","key","id","name","number","onClick","Filter","searchTerm","handleSearchChange","baseUrl","axios","get","then","response","data","newObject","post","delete","put","Notification","message","hasError","nameOfClass","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchTerm","setSearchResults","errorMessage","setErrorMessage","notification","setNotification","useEffect","personService","initialPersons","results","filter","toLowerCase","includes","event","target","preventDefault","some","toUpperCase","window","confirm","find","p","changedPerson","returnedPerson","setTimeout","catch","error","console","log","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.555d252c.chunk.js","sourcesContent":["import React from 'react';\n\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name: <input\n                    value={newName}\n                    onChange={handleNameChange} />\n            </div>\n            <div>number: <input\n                value={newNumber}\n                onChange={handleNumberChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm;","import React from 'react';\n\nconst Persons = ({ searchResults, deletePerson }) => {\n    const entries = () => searchResults.map(person => (\n        <li key={person.id}>{person.name + `${' '}`}{person.number + `${' '}`}\n            <button onClick={() => deletePerson(person.id, person.name)}>Delete</button>\n        </li>\n    ));\n    return (\n        <ul>\n            {entries()}\n        </ul>\n    )\n}\n\nexport default Persons;\n\n","import React from 'react';\n\nconst Filter = ({ searchTerm, handleSearchChange }) => {\n    return (\n        <div>\n            filter shown with <input\n                value={searchTerm}\n                onChange={handleSearchChange} />\n        </div>\n    )\n}\n\nexport default Filter;","import axios from 'axios';\n\nconst baseUrl = '/api/persons' \n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React from 'react';\n\nconst Notification = ({ message, hasError = false }) => {\n    const nameOfClass = hasError ? 'error-message' : 'success-message';\n\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={nameOfClass}>\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Filter from './components/Filter';\nimport personService from './services/persons';\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [searchResults, setSearchResults] = useState([])\n  const [errorMessage, setErrorMessage] = useState('')\n  const [notification, setNotification] = useState('')\n\n  //gets info from server\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  //goes through names and lowercases them all to avoid confusion. Then sets the results variable \n  //to the person on the list who matches the search term entered\n  useEffect(() => {\n    const results = persons.filter(person =>\n      person.name.toLowerCase().includes(searchTerm)\n    );\n    setSearchResults(results);\n  }, [searchTerm, persons]);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  //creates new person object and if that person is not in the phonebook, adds them. If they are, alerts user.\n  const addPerson = (event, id) => {\n    event.preventDefault()\n    //if person already exists, offer to update their phone number\n    if (persons.some(person => person.name.toUpperCase() === newName.toUpperCase())) {\n      const update = window.confirm(`${newName} is already added to the phonebook. Replace the old number with a new one?`);\n      if (!update) {\n        return;\n      }\n\n      const person = persons.find(p => p.name.toUpperCase() === newName.toUpperCase())\n      const changedPerson = { ...person, number: newNumber }\n\n      personService\n        .update(changedPerson.id, changedPerson)\n        .then(returnedPerson => {\n          setNotification(`${changedPerson.name}'s number has been changed.`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n          setPersons(persons.map(person => person.id !== changedPerson.id ? person : returnedPerson))\n        })\n        .catch(error => {\n          console.log('error', error);\n          setErrorMessage(`${changedPerson.name} was already deleted from the server.`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNotification(`${returnedPerson.name} has been added.`)\n        })\n        .catch(error => {\n          setNotification(`${error.response.data}`);\n        })\n    }\n  }\n\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== id));\n        })\n        .catch(error => {\n          console.log('error', error);\n          setErrorMessage(`${name} was deleted from the server already.`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {errorMessage ? (\n        <Notification message={errorMessage} hasError={true} />\n      ) : null}\n      {notification ? <Notification message={notification} /> : null}\n      <Filter searchTerm={searchTerm} handleSearchChange={handleSearchChange} />\n      <h3>Add New Contact</h3>\n      <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h3>Numbers</h3>\n      <Persons searchResults={searchResults} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}